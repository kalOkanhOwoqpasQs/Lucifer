for i, bot in pairs(getBots()) do
    if getBot().name:upper() == bot.name:upper() then
        indexbot = i
    end
end

seed = block + 1
worlds = {}
infoblock = {}
infoseed = {}
infopack = {}
infoevent = {}
backups = {}
index = 1
local tilePack = 0
local tileBlock = 0
local tileSeed = 0
local tileEvent = 0
local setting = {}
local params = {
    block = 1,
    seed = 1,
    pack = 1,
    event = 1,
    backup = 1,
    timechecker = os.time()
}
seedX = dropseedX - 1
seedY = dropseedY - 1
packX = droppackX - 1
packY = droppackY - 1
blockX = dropblockX - 1
blockY = dropblockY - 1
eventX = dropeventX - 1
eventY = dropeventY -1

if indexbot then
    startY = 1 + ((indexbot - 1) * 2)
    increment = #getBots() * 2
    getBot().legit_mode = false
    getBot().move_range = moveRange
    getBot().move_interval = moveInterval
    getBot().auto_reconnect = false
    if ignoregems then
        getBot().ignore_gems = true
    end
    for i =  1,worldperbot do
        table.insert(worlds,farmList[math.floor((indexbot - 1) * worldperbot + i)])
    end
    for i =  1,botperswitch do
        table.insert(backups,botSwitch[math.floor((indexbot - 1) * botperswitch + i)])
    end
end

move = function(x,y)
    getBot():moveTo(x,y)
end

punch = function(ex,ye)
    getBot():hit(getBot().x+ex,getBot().y+ye)
end

findPath = function(x,y)
    getBot():findPath(x,y)
end

sendPacket = function(str,int)
    return getBot():sendPacket(int,str)
end

findItem = function(id)
    return getBot():getInventory():getItemCount(id)
end

place = function(id,ex,ye)
    getBot():place(getBot().x+ex,getBot().y+ye,id)
end

collect = function(int)
    getBot():collect(int)
end

drop = function(id,amt)
    getBot():drop(id,amt)
end

setting.recycles = function()
    if findItem(block) > 0 then
        sendPacket("action|trash\n|itemID|"..block,2)
        sleep(1000)
        sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. block .. "|\ncount|" .. findItem(block),2)
        sleep(1000)
    end
end

setting.split = function(str, ptr)
    if not ptr then 
        ptr = "%s"
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string) 
    end
    return tbl
end

setting.getEnetBot = function()
    strings = ""
    for i, list in pairs(getBots()) do
        if list.status == BotStatus.online then
            Status = "Online"
        elseif list.status == BotStatus.account_banned  then
            Status = "Suspended"
        elseif list.status == BotStatus.error_connecting  then
            Status = "Ercon"
        else
            Status = "Disconnect"
        end
        strings = strings.."\n"..Status.."" 
    end
    return strings
end

setting.botstatus = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        strings = strings.."\n["..bot.level.."]||"..string.upper(bot.name).."||" 
    end
    return strings
end

setting.botworld = function()
    strings = ""
    for _, bots in pairs(getBots()) do
        strings = strings.."\n||"..string.upper(bots:getWorld().name).."||" 
    end
    return strings
end

setting.botgems = function()
    local count = 0
    for _,bot in pairs(getBots()) do
        count = count + bot.gem_count
    end
    return count
end

setting.hookblock = function()
    str = ""
	for i = 1, #storageblock do
        str = str.."\n||"..string.upper(storageblock[i]).."|| : "..(infoblock[storageblock[i]] or "?")..""
    end
    return str
end

setting.hookseed = function()
    str = ""
	for i = 1, #storageseed do
        str = str.."\n||"..string.upper(storageseed[i]).."|| : "..(infoseed[storageseed[i]] or "?")..""
    end
    return str
end

setting.hookpack = function()
    str = ""
	for i = 1, #storagepack do
        str = str.."\n||"..string.upper(storagepack[i]).."|| : "..(infopack[storagepack[i]] or "?")..""
    end
    return str
end

setting.hookevent = function()
    str = ""
	for i = 1, #storageevent do
        str = str.."\n||"..string.upper(storageevent[i]).."|| : "..(infoevent[storageevent[i]] or "?")..""
    end
    return str
end

setting.webhookinfo = function()
	if botinfo then
        realtime = os.time() - params.timechecker
        local text = [[
            $webHookUrl = "]]..linkbotinfo..[[/messages/]]..messageidbotinfo..[["
            $payload = @{
                username = "Caramoy's"
                embeds = @(
                    @{
                        title = "Caramoy Syndicate : https://discord.com/invite/fTTKW8vvuq"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = ""
                                value = "]].."RUNTIME : "..math.floor(realtime/86400).." Days "..math.floor(realtime%86400/3600).." Hours "..math.floor(realtime%86400%3600/60).." Minutes"..[["
                                inline = "false"
                            }
                            @{
                                name = ""
                                value = "]].."TOTAL GEMS : "..setting.botgems()..[["
                                inline = "false"
                            }
                            @{
                                name = "BOTNAME"
                                value = "]]..setting.botstatus()..[["
                                inline = "true"
                            }
                            @{
                                name = "WORLD"
                                value = "]]..setting.botworld()..[["
                                inline = "true"
                            }
                            @{
                                name = "STATUS"
                                value = "]]..setting.getEnetBot()..[["
                                inline = "true"
                            }
                        )
                    }
                    @{
                        fields = @(
                            @{
                                name = "STORAGE BLOCK"
                                value = "]]..setting.hookblock()..[["
                                inline = "true"
                            }
                            @{
                                name = "STORAGE SEED"
                                value = "]]..setting.hookseed()..[["
                                inline = "true"
                            }
                            @{
                                name = "STORAGE PACK"
                                value = "]]..setting.hookpack()..[["
                                inline = "true"
                            }
                            @{
                                name = "STORAGE EVENT"
                                value = "]]..setting.hookevent()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Lucifer] : Harvest Script`nLast update : ]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
                        }
                    }
                )
            }
            
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

setting.botinfo = function(text)
    if webhookstatus then
        text = [[
            $webHookUrl = "]]..webhookstatuslink..[["
            $payload = @{
                content = "]]..text..[["
            }
            
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType "application/json"
        ]]
        local file = io.popen("powershell -command -", "w")
        file:write(text)
        file:close()
    end
end

setting.reconnect = function(world,id,x,y)
    if getBot():getPing() == 0 then
        getBot():disconnect()
        sleep(2000)
    end
    if not getBot():isInWorld(world:upper()) and getBot().status == BotStatus.online then 
        setting.botinfo("("..getBot().name..") at another world, trying to joining world again @everyone")
        local count = 0
        while not getBot():isInWorld(world:upper()) do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if not getBot():isInWorld(world:upper()) then 
                count = count + 1
                if count > 5 then
                    setting.botinfo("("..getBot().name..") Failed to joining world again, terminated script @everyone")
                    getBot():stopScript()
                end
            end
        end
        if id ~= "" then
            local stucks = 0
            while getTile(getBot().x,getBot().y).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0",3)
                sleep(delaywarp)
                if stucks > 3 then
                    setting.botinfo("("..getBot().name..") Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    getBot():stopScript()
                end
            end
        end
        if x and y then
            while getBot().x ~= x or getBot().y ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        setting.botinfo("("..getBot().name..") success to joining world @everyone")
    end
    if getBot().status ~= BotStatus.online then
        setting.botinfo("("..getBot().name..") status is offline @everyone")
        while getBot().status ~= BotStatus.online do
            getBot():connect()
            sleep(delayreconnect)
            if getBot().status == BotStatus.account_banned then
                setting.botinfo("("..getBot().name..") status is suspended, removing bot @everyone")
                getBot():stopScript()
            end
        end
        local counts = 0
        while not getBot():isInWorld(world:upper()) do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if not getBot():isInWorld(world:upper()) then 
                counts = counts + 1
                if counts > 5 then
                    setting.botinfo("("..getBot().name..") Failed to joining world again, terminated script @everyone")
                    getBot():stopScript()
                end
            end
        end
        if id ~= "" then
            local stuckk = 0
            while getTile(getBot().x,getBot().y).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0",3)
                sleep(delaywarp)
                if stuckk > 3 then
                    setting.botinfo("("..getBot().name..") Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    getBot():stopScript()
                end
            end
        end
        if x and y then
            while getBot().x ~= x or getBot().y ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        setting.botinfo("("..getBot().name..") status is online @everyone")
    end
    if getTile(getBot().x,getBot().y).fg == 6 then
        setting.botinfo("("..getBot().name..") Stuck at white door ! @everyone")
        local stuck = 0
        if id ~= "" then
            while getTile(getBot().x,getBot().y).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0",3)
                sleep(delaywarp)
                if stuck > 3 then
                    setting.botinfo("("..getBot().name..") Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                end
            end
        end
        if x and y then
            while getBot().x ~= x or getBot().y ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        setting.botinfo("("..getBot().name..") Already back to pos ! @everyone")
    end
end

setting.warp = function(world,door,cooldown)
    name = world
    if door ~= "" then
        name = name .. "|" ..door
    end
    if not getBot():isInWorld(world:upper()) then
        addEvent(Event.variantlist, function(variant, netid)
            if variant:get(0):getString() == "OnConsoleMessage" then
                if variant:get(1):getString():lower():find("inaccessible.") then
                    nuked = true
                end
                if variant:get(1):getString():lower():find("experiencing ") then
                    subserver = true
                end
            end
        end)
        while not getBot():isInWorld(world:upper()) and not nuked and not subserver do
            if getBot():getPing() == 0 then
                getBot():disconnect()
                sleep(2000)
            end
            while getBot().status ~= BotStatus.online do
                getBot():connect()
                sleep(delayreconnect)
                if getBot().status == BotStatus.account_banned then
                    setting.botinfo("("..getBot().name..") status is suspended, removing bot @everyone")
                    getBot():stopScript()
                end
            end
            sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
            listenEvents(8)
            sleep(cooldown)
        end
        removeEvents()
        sleep(2000)
    end
    if getBot():isInWorld(world:upper()) then
        if door ~= "" then
            local stuck = 0
            while getTile(getBot().x,getBot().y).fg == 6 and not wrong do
                if getBot():getPing() == 0 then
                    getBot():disconnect()
                    sleep(2000)
                end
                while getBot().status ~= BotStatus.online do
                    getBot():connect()
                    sleep(delayreconnect)
                    if getBot().status == BotStatus.account_banned then
                        setting.botinfo("("..getBot().name..") status is suspended, removing bot @everyone")
                        getBot():stopScript()
                    end
                end
                sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
                sleep(cooldown)
                stuck = stuck + 1
                if stuck == 5 then
                    wrong = true
                end
            end
        end
    end
end

setting.itemFloat = function(id)
    return getBot():getWorld().growscan:getObjects()[id] or 0
end

setting.joinworld = function()
    print("["..indexbot.."]Clearing history")
    for _, worlds in pairs(worldclearhistory) do
        ::BACK::
        setting.warp(worlds,"",5000)
        if not subserver then
            if not nuked then
                while getTile(getBot().x,getBot().y).fg == 6 do
                    move(1,0)
                    sleep(500)
                    setting.reconnect(worlds,"")
                end
            else
                nuked = false
                sleep(5000)
                print("["..indexbot.."]World clearing history has nuked or higher level!!, change ur world history list")
                setting.botinfo("World clearing history has nuked or higher level!!, change ur world history list. SC Terminated @everyone")
                getBot():stopScript()
            end
        else
            subserver = false
            sleep(5000)
            print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto BACK
        end
    end
end

setting.buying = function()
    print("["..indexbot.."]Buying packs")
    if upbackpack then
        while getBot():getInventory().slotcount < 36 do
            sendPacket("action|buy\nitem|upgrade_backpack",2)
            sleep(1000)
        end
    end
    while getBot().gem_count >= pricepack do
        sendPacket("action|buy\nitem|"..debug,2)
        sleep(1000)
    end
end

setting.storingevents = function()
    for i = params.event , #storageevent do
        print("["..indexbot.."]Dropping events")
        world = storageevent[i]
        setting.warp(world,doorstorageevent,delaywarp)
        setting.webhookinfo()
        ::Here::
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(itemevent[1]) >= limitevent then
                        infoevent[world] = ""..setting.itemFloat(itemevent[1]).."x (LIMIT)"
                        setting.botinfo("Events storage : ("..world..") has reached limit, skipped world @everyone")
                        print("["..indexbot.."]Events storage : ("..world..") has reached limit, skipped world")
                        params.event = params.event + 1
                        if params.event > #storageevent then
                            infoevent[world] = ""..setting.itemFloat(itemevent[1]).."x (LIMIT)"
                            setting.botinfo("All events storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            print("["..indexbot.."]All events storage has reached limit, Removing bot : ("..getBot().name..")")
                            setting.webhookinfo()
                            if removingbot then
                                removeBot()
                                sleep(2000)
                            end
                            getBot():stopScript()
                        end
                        tileEvent = 0
                    else
                        for y,pack in pairs(itemevent) do
                            for i,tile in pairs(getBot():getWorld():getTiles()) do
                                if separated then
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(eventX + (tileEvent),eventY - (y - 1))
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                        if eventX + (tileEvent) >= 98 then
                                            eventY = eventY - 1
                                            tileEvent = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack,200)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                            count = count + 1
                                            if count >= 2 then
                                                tileEvent = tileEvent + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                else
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(eventX + (tileEvent),eventY)
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                        if eventX + (tileEvent) >= 98 then
                                            eventY = eventY - 1
                                            tileEvent = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack,200)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                            count = count + 1
                                            if count >= 2 then
                                                tileEvent = tileEvent + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                end
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoevent[world] = "WRONG DOOR"
                    wrong = false
                    sleep(5000)
                    print("["..indexbot.."]("..world..") Id door events storage is wrong, check ur id door!")
                    setting.botinfo("("..world..") Id door events storage is wrong, check ur id door! @everyone")
                    params.event = params.event + 1
                    if params.event > #storageevent then
                        print("["..indexbot.."]All events storage has reached limit")
                        setting.botinfo("All events storage has reached limit! Removing bot : ("..getBot().name..") @everyone")
                        if removingbot then
                            removeBot()
                            sleep(2000)
                        end
                        getBot():stopScript()
                    end
                    tileEvent = 0
                end
            else
                infoevent[world] = "NUKED"
                nuked = false
                sleep(5000)
                print("["..indexbot.."]("..world..") event Storage is NUKED, check ur storage!")
                setting.botinfo("("..world..") event Storage is NUKED, check ur storage! @everyone")
                params.event = params.event + 1
                if params.event > #storageevent then
                    print("["..indexbot.."]All events storage has reached limit!")
                    setting.botinfo("All events storage has reached limit! Removing bot : ("..getBot().name..") @everyone")
                    if removingbot then
                        removeBot()
                        sleep(2000)
                    end
                    getBot():stopScript()
                end
                tileEvent = 0
            end
        else
            subserver = false
            sleep(5000)
            print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            setting.reconnect(world,doorstorageevent)
            goto Here
        end
    end
    infoevent[world] = ""..setting.itemFloat(itemevent[1]).."x"
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingpacks = function()
    for i = params.pack , #storagepack do
        print("["..indexbot.."]Dropping packs")
        world = storagepack[i]
        setting.warp(world,doorstoragepack,delaywarp)
        setting.webhookinfo()
        ::Here::
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(packList[1]) >= limitpack then
                        infopack[world] = "x"..setting.itemFloat(packList[1]).."x (LIMIT)"
                        setting.botinfo("Packs storage : ("..world..") has reached limit, skipped world @everyone")
                        print("["..indexbot.."]Packs storage : ("..world..") has reached limit, skipped world")
                        params.pack = params.pack + 1
                        if params.pack > #storagepack then
                            infopack[world] = "x"..setting.itemFloat(packList[1]).."x (LIMIT)"
                            setting.botinfo("All packs storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            print("["..indexbot.."]All packs storage has reached limit, Removing bot : ("..getBot().name..")")
                            setting.webhookinfo()
                            if removingbot then
                                removeBot()
                                sleep(2000)
                            end
                            getBot():stopScript()
                        end
                        tilePack = 0
                    else
                        for y,pack in pairs(packList) do
                            for i,tile in pairs(getBot():getWorld():getTiles()) do
                                if separated then
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(packX + (tilePack),packY - (y-1))
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                        if packX + (tilePack) >= 98 then
                                            packY = packY - 1
                                            tilePack = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack,200)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                            count = count + 1
                                            if count >= 2 then
                                                tilePack = tilePack + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                else
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(packX + (tilePack),packY)
                                        sleep(1000)
                                        local count = 0
                                        setting.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                        if packX + (tilePack) >= 98 then
                                            packY = packY - 1
                                            tilePack = 0
                                        end
                                        while findItem(pack) > 0 do
                                            drop(pack,200)
                                            sleep(delaydrop)
                                            setting.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                            count = count + 1
                                            if count >= 2 then
                                                tilePack = tilePack + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(pack) == 0 then
                                        break
                                    end
                                end
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infopack[world] = "WRONG DOOR"
                    wrong = false
                    sleep(5000)
                    print("["..indexbot.."]("..world..") Id door packs storage is wrong, check ur id door!")
                    setting.botinfo("("..world..") Id door packs storage is wrong, check ur id door! @everyone")
                    params.pack = params.pack + 1
                    if params.pack > #storagepack then
                        print("["..indexbot.."]All packs storage has reached limit")
                        setting.botinfo("All packs storage has reached limit! Removing bot : ("..getBot().name..") @everyone")
                        if removingbot then
                            removeBot()
                            sleep(2000)
                        end
                        getBot():stopScript()
                    end
                    tilePack = 0
                end
            else
                infopack[world] = "NUKED"
                nuked = false
                sleep(5000)
                print("["..indexbot.."]("..world..") packs Storage is NUKED, check ur storage!")
                setting.botinfo("("..world..") packs Storage is NUKED, check ur storage! @everyone")
                params.pack = params.pack + 1
                if params.pack > #storagepack then
                    print("["..indexbot.."]All packs storage has reached limit!")
                    setting.botinfo("All packs storage has reached limit! Removing bot : ("..getBot().name..") @everyone")
                    if removingbot then
                        removeBot()
                        sleep(2000)
                    end
                    getBot():stopScript()
                end
                tilePack = 0
            end
        else
            subserver = false
            sleep(5000)
            print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            setting.reconnect(world,doorstoragepack)
            goto Here
        end
    end
    infopack[world] = ""..setting.itemFloat(packList[1]).."x"
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingseeds = function()
    for i = params.seed , #storageseed do
        world = storageseed[i]
        print("["..indexbot.."]Dropping seeds")
        setting.warp(world,doorstorageseed,delaywarp)
        setting.webhookinfo()
        ::Here::
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(seed) >= limitseed then
                        infoseed[world] = ""..setting.itemFloat(seed).."x (LIMIT)"
                        setting.botinfo("Seeds storage : ("..world..") has reached limit, skipped world @everyone")
                        print("["..indexbot.."]Seeds storage : ("..world..") has reached limit, skipped world")
                        params.seed = params.seed + 1
                        if params.seed > #storageseed then
                            infoseed[world] = ""..setting.itemFloat(seed).."x (LIMIT)"
                            setting.botinfo("All seeds storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            print("["..indexbot.."]All seeds storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            setting.webhookinfo()
                            if removingbot then
                                removeBot()
                                sleep(2000)
                            end
                            getBot():stopScript()
                        end
                        tileSeed = 0
                    else
                        for i,tile in pairs(getBot():getWorld():getTiles()) do
                            if tile.fg == 0 or tile.bg == 0 then
                                ::BACK::
                                findPath(seedX + (tileSeed),seedY)
                                sleep(1000)
                                local count = 0
                                setting.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                if seedX + (tileSeed) >= 98 then
                                    seedY = seedY - 1
                                    tileSeed = 0
                                end
                                while findItem(seed) > 0 do
                                    drop(seed,200)
                                    sleep(delaydrop)
                                    setting.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                    count = count + 1
                                    if count >= 2 then
                                        tileSeed = tileSeed + 1
                                        goto BACK
                                    end
                                end
                            end
                            if findItem(seed) == 0 then
                                break
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoseed[world] = "WRONG DOOR"
                    wrong = false
                    sleep(5000)
                    print("["..indexbot.."]("..world..") Id door seeds storage is wrong, check ur id door!")
                    setting.botinfo("("..world..") Id door seeds storage is wrong, check ur id door! @everyone")
                    params.seed = params.seed + 1
                    if params.seed > #storageseed then
                        print("["..indexbot.."]All seeds storage has reached limit")
                        setting.botinfo("All seeds storage has reached limit @everyone")
                        if removingbot then
                            removeBot()
                            sleep(2000)
                        end
                        getBot():stopScript()
                    end
                    tileSeed = 0
                end
            else
                infoseed[world] = "NUKED"
                nuked = false
                sleep(5000)
                print("["..indexbot.."]("..world..") seeds Storage is NUKED, check ur storage!")
                setting.botinfo("("..world..") seeds Storage is NUKED, check ur storage! @everyone")
                params.seed = params.seed + 1
                if params.seed > #storageseed then
                    print("["..indexbot.."]All seeds storage has reached limit!")
                    setting.botinfo("All seeds storage has reached limit! @everyone")
                    if removingbot then
                        removeBot()
                        sleep(2000)
                    end
                    getBot():stopScript()
                end
                tileSeed = 0
            end
        else
            subserver = false
            sleep(5000)
            print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            setting.reconnect(world,doorstorageseed)
            goto Here
        end
    end
    infoseed[world] = ""..setting.itemFloat(seed).."x"
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingblocks = function()
    for i = params.block , #storageblock do
        world = storageblock[i]
        print("["..indexbot.."]Dropping Blocks")
        setting.warp(world,doorstorageblock,delaywarp)
        setting.webhookinfo()
        ::Here::
        if not subserver then
            if not nuked then
                if not wrong then
                    if setting.itemFloat(block) >= limitblock then
                        infoblock[world] = ""..setting.itemFloat(block).."x (LIMIT)"
                        setting.botinfo("Blocks storage : ("..world..") has reached limit, skipped world @everyone")
                        print("["..indexbot.."]Blocks storage : ("..world..") has reached limit, skipped world")
                        params.block = params.block + 1
                        if params.block > #storageblock then
                            infoblock[world] = ""..setting.itemFloat(block).."x (LIMIT)"
                            setting.botinfo("All blocks storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            print("["..indexbot.."]All blocks storage has reached limit, Removing bot : ("..getBot().name..") @everyone")
                            setting.webhookinfo()
                            if removingbot then
                                removeBot()
                                sleep(2000)
                            end
                            getBot():stopScript()
                        end
                        tileBlock = 0
                    else
                        for i,tile in pairs(getBot():getWorld():getTiles()) do
                            if tile.fg == 0 or tile.bg == 0 then
                                ::BACK::
                                findPath(blockX + (tileBlock),blockY)
                                sleep(1000)
                                local count = 0
                                setting.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                if blockX + (tileBlock) >= 98 then
                                    blockY = blockY - 1
                                    tileBlock = 0
                                end
                                while findItem(block) > 0 do
                                    drop(block,200)
                                    sleep(delaydrop)
                                    setting.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                    count = count + 1
                                    if count >= 2 then
                                        tileBlock = tileBlock + 1
                                        goto BACK
                                    end
                                end
                            end
                            if findItem(block) == 0 then
                                break
                            end
                        end
                        sleep(100)
                        break
                    end
                else
                    infoblock[world] = "WRONG DOOR"
                    wrong = false
                    sleep(5000)
                    print("["..indexbot.."]("..world..") Id door blocks storage is wrong, check ur id door!")
                    setting.botinfo("("..world..") Id door blocks storage is wrong, check ur id door! @everyone")
                    params.block = params.block + 1
                    if params.block > #storageblock then
                        print("["..indexbot.."]All blocks storage has reached limit")
                        setting.botinfo("All blocks storage has reached limit @everyone")
                        if removingbot then
                            removeBot()
                            sleep(2000)
                        end
                        getBot():stopScript()
                    end
                    tileBlock = 0
                end
            else
                infoblock[world] = "NUKED"
                nuked = false
                sleep(5000)
                print("["..indexbot.."]("..world..") blocks Storage is NUKED, check ur storage!")
                setting.botinfo("("..world..") blocks Storage is NUKED, check ur storage! @everyone")
                params.block = params.block + 1
                if params.block > #storageblock then
                    print("["..indexbot.."]All blocks storage has reached limit!")
                    setting.botinfo("All blocks storage has reached limit! @everyone")
                    if removingbot then
                        removeBot()
                        sleep(2000)
                    end
                    getBot():stopScript()
                end
                tileBlock = 0
            end
        else
            subserver = false
            sleep(5000)
            print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            setting.reconnect(world,doorstorageblock)
            goto Here
        end
    end
    infoblock[world] = ""..setting.itemFloat(block).."x"
    if clearhistory then
        setting.joinworld()
    end
end

setting.rechecking = function(threads)
    ::back::
    if not multiplebot then
        for _, tile in pairs(getBot():getWorld():getTiles()) do
            if tile.fg == seed and tile:canHarvest() then
                if findItem(idwearitem) == 0 and wearitem then
                    while findItem(idwearitem) == 0 do
                        setting.support()
                        sleep(6000)
                    end
                    print("["..indexbot.."]Rechecking")
                    setting.warp(threads,doorfarmList,delaywarp)
                    goto back
                end
                if findItem(block) >= amountblock then
                    if recycle then
                        setting.recycles()
                    else
                        setting.storingblocks()
                        print("["..indexbot.."]Rechecking")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto back
                    end
                end
                if autoSwitch and getBot().level >= switchOnLevel then
                    if findItem(block) > 0 then
                        setting.storingblocks()
                    end
                    if findItem(seed) > 0 then
                        setting.storingseeds()
                    end
                    setting.backupacc()
                    setting.warp(threads,doorfarmList,delaywarp)
                    setting.webhookinfo()
                    goto back
                end
                if findItem(itemevent[1]) > amount then
                    setting.storingevents()
                    print("["..indexbot.."]Rechecking")
                    setting.warp(threads,doorfarmList,delaywarp)
                    setting.webhookinfo()
                    goto back
                elseif findItem(seed) > amountseed then
                    setting.storingseeds()
                    print("["..indexbot.."]Rechecking")
                    setting.warp(threads,doorfarmList,delaywarp)
                    setting.webhookinfo()
                    goto back
                elseif getBot().gem_count >= mingems and buypack then
                    setting.buying()
                    setting.storingpacks()
                    print("["..indexbot.."]Rechecking")
                    setting.warp(threads,doorfarmList,delaywarp)
                    setting.webhookinfo()
                    goto back
                end
                findPath(tile.x,tile.y)
                sleep(30)
                setting.reconnect(threads,doorfarmList,tile.x,tile.y)
                if tile.fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    setting.reconnect(threads,doorfarmList,tile.x,tile.y)
                end
                collect(range)
                sleep(30)
            end
        end
    else
        for y = startY, 53, increment do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y):canHarvest() then
                    if findItem(idwearitem) == 0 and wearitem then
                        while findItem(idwearitem) == 0 do
                            setting.support()
                            sleep(6000)
                        end
                        print("["..indexbot.."]Rechecking")
                        setting.warp(threads,doorfarmList,delaywarp)
                        goto back
                    end
                    if findItem(block) > amountblock then
                        if recycle then
                            setting.recycles(threads)
                        else
                            setting.storingblocks()
                            print("["..indexbot.."]Rechecking")
                            setting.warp(threads,doorfarmList,delaywarp)
                            setting.webhookinfo()
                            goto back
                        end
                    end
                    if autoSwitch and getBot().level >= switchOnLevel then
                        if findItem(block) > 0 then
                            setting.storingblocks()
                        end
                        if findItem(seed) > 0 then
                            setting.storingseeds()
                        end
                        setting.backupacc()
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto back
                    end
                    if findItem(itemevent[1]) > amount then
                        setting.storingevents()
                        print("["..indexbot.."]Rechecking")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto back
                    elseif findItem(seed) > amountseed then
                        setting.storingseeds()
                        print("["..indexbot.."]Rechecking")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto back
                    elseif getBot().gem_count >= mingems and buypack then
                        setting.buying()
                        setting.storingpacks()
                        print("["..indexbot.."]Rechecking")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto back
                    end
                    findPath(x,y)
                    sleep(30)
                    setting.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        setting.reconnect(threads,doorfarmList,x,y)
                    end
                    collect(range)
                    sleep(25)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    end
    for _, obj in pairs(getBot():getWorld():getObjects()) do
        if obj.id == block then
            if setting.itemFloat(block) ~= 0 then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(30)
                collect(range)
                sleep(30)
                setting.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
            end
            if findItem(block) > amountblock then
                if recycle then
                    setting.recycles(threads)
                else
                    setting.storingblocks()
                    print("["..indexbot.."]Rechecking")
                    setting.warp(threads,doorfarmList,delaywarp)
                    setting.webhookinfo()
                    goto back
                end
            end
            if findItem(itemevent[1]) > amount then
                setting.storingevents()
                print("["..indexbot.."]Rechecking")
                setting.warp(threads,doorfarmList,delaywarp)
                setting.webhookinfo()
                goto back
            elseif findItem(seed) > amountseed then
                setting.storingseeds()
                print("["..indexbot.."]Rechecking")
                setting.warp(threads,doorfarmList,delaywarp)
                setting.webhookinfo()
                goto back
            elseif getBot().gem_count >= mingems and buypack then
                setting.buying()
                setting.storingpacks()
                print("["..indexbot.."]Rechecking")
                setting.warp(threads,doorfarmList,delaywarp)
                setting.webhookinfo()
                goto back
            end
        end
    end
end

setting.running = function(threads)
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    ::BACK::
    print("["..indexbot.."]Harvest")
    if not multiplebot then
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y):canHarvest() then
                    if findItem(idwearitem) == 0 and wearitem then
                        while findItem(idwearitem) == 0 do
                            setting.support()
                            sleep(6000)
                        end
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        goto BACK
                    end
                    if findItem(block) > amountblock then
                        if recycle then
                            setting.recycles(threads)
                        else
                            setting.storingblocks()
                            print("["..indexbot.."]Harvest")
                            setting.warp(threads,doorfarmList,delaywarp)
                            setting.webhookinfo()
                            goto BACK
                        end
                    end
                    if autoSwitch and getBot().level >= switchOnLevel then
                        if findItem(block) > 0 then
                            setting.storingblocks()
                        end
                        if findItem(seed) > 0 then
                            setting.storingseeds()
                        end
                        setting.backupacc()
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    end
                    if findItem(itemevent[1]) > amount then
                        setting.storingevents()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    elseif findItem(seed) > amountseed then
                        setting.storingseeds()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    elseif getBot().gem_count >= mingems and buypack then
                        setting.buying()
                        setting.storingpacks()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    end
                    findPath(x,y)
                    sleep(30)
                    setting.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        setting.reconnect(threads,doorfarmList,x,y)
                    end
                    collect(range)
                    sleep(25)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    else
        for y = startY, 53, increment do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y):canHarvest() then
                    if findItem(idwearitem) == 0 and wearitem then
                        while findItem(idwearitem) == 0 do
                            setting.support()
                            sleep(6000)
                        end
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        goto BACK
                    end
                    if findItem(block) > amountblock then
                        if recycle then
                            setting.recycles(threads)
                        else
                            setting.storingblocks()
                            print("["..indexbot.."]Harvest")
                            setting.warp(threads,doorfarmList,delaywarp)
                            setting.webhookinfo()
                            goto BACK
                        end
                    end
                    if autoSwitch and getBot().level >= switchOnLevel then
                        if findItem(block) > 0 then
                            setting.storingblocks()
                        end
                        if findItem(seed) > 0 then
                            setting.storingseeds()
                        end
                        setting.backupacc()
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    end
                    if findItem(itemevent[1]) > amount then
                        setting.storingevents()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    elseif findItem(seed) > amountseed then
                        setting.storingseeds()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    elseif getBot().gem_count >= mingems and buypack then
                        setting.buying()
                        setting.storingpacks()
                        print("["..indexbot.."]Harvest")
                        setting.warp(threads,doorfarmList,delaywarp)
                        setting.webhookinfo()
                        goto BACK
                    end
                    findPath(x,y)
                    sleep(30)
                    setting.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        setting.reconnect(threads,doorfarmList,x,y)
                    end
                    collect(range)
                    sleep(25)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    end
end

setting.support = function()
    ::BACK::
    print("["..indexbot.."]Take support items")
    world = setting.split(worldwearitem[index],"[^:]+")[1]
    door = setting.split(worldwearitem[index],"[^:]+")[2]
    setting.warp(world,door,delaywarp)
    if not subserver then
        if not nuked then
            if not wrong then
                if findItem(idwearitem) == 0 and setting.itemFloat(idwearitem) >= keep then
                    for _, obj in pairs(getBot():getWorld():getObjects()) do
                        if obj.id == idwearitem then
                            findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                            sleep(1000)
                            collect(range)
                            sleep(1000)
                            setting.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                        end
                        if findItem(idwearitem) > 0  then
                            break
                        end
                    end
                    if findItem(idwearitem) > 0  then
                        move(1,0)
                        sleep(500)
                        getBot():wear(idwearitem)
                        getBot():setDirection(true)
                        sleep(500)
                        drop(idwearitem,findItem(idwearitem) - keep)
                        sleep(500)
                        print("["..indexbot.."]("..getBot().name..") Success take and wear the support items!")
                        setting.botinfo("("..getBot().name..") Success take and wear the support items!")
                    end
                else
                    print("["..indexbot.."]Support item is empty, Drop the support item right now!")
                    setting.botinfo("Support item is empty, Drop the support item right now! @everyone")
                end
            else
                wrong = false
                sleep(5000)
                print("["..indexbot.."]Id door world take support items is wrong, check ur id door!")
                setting.botinfo("Id door world take support items is wrong, check ur id door! @everyone")
                getBot():stopScript()
            end
        else
            nuked = false
            sleep(5000)
            print("["..indexbot.."]World take support items is nuked, check ur world!")
            setting.botinfo("World take support items is nuked, check ur world! @everyone")
            getBot():stopScript()
        end
    else
        subserver = false
        sleep(5000)
        print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
        setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
        sleep(120000)
        goto BACK
    end
end

setting.randomletter = function()
    local letter = ""
    local function stringRandom()
        local random = math.random(1,3)
        if random == 1 then
            return string.char(math.random(97,122))
        elseif random == 2 then
            return string.char(math.random(65,90))
        else
            return string.char(math.random(48,57))
        end
    end
    for i = 1, lettername do
        letter = letter..stringRandom()
    end
    return letter
end

setting.backupacc = function()
    setting.botinfo("Bot : "..getBot().name.." reached max level, switching bot")
    ::BACK::
    for i = params.backup, #backups do
        thread = setting.split(backups[i],"([^|]+)")[1]
        threading = setting.split(backups[i],"([^|]+)")[2]
        if typeaccount == "normal" then
            getBot():updateBot(thread,threading)
            sleep(delayloginbot)
        elseif typeaccount == "guest" then
            getBot():updateBot(""..setting.randomletter().."",thread,threading)
            sleep(delayloginbot)
        end
        getBot().auto_reconnect = false
        setting.botinfo("Succes switching bot to : "..getBot().name.."")
        while getBot().status ~= BotStatus.online do
            getBot():connect()
            sleep(delayreconnect)
            if getBot().status == BotStatus.account_banned then
                setting.writeFile("NextBotStatus","["..getBot().name.."] status is Suspended")
                params.backup = params.backup + 1
                if params.backup > #backups then
                    print("["..indexbot.."]No more bots to switch, sc terminated")
                    if removingbot then
                        removeBot()
                        sleep(2000)
                    end
                    getBot():stopScript()
                end
                goto BACK
            end
        end
        if getBot().status == BotStatus.online and getBot().level < switchOnLevel then
            break
        elseif getBot().status == BotStatus.online and getBot().level >= switchOnLevel then
            params.backup = params.backup + 1
            if params.backup > #backups then
                print("["..indexbot.."]No more bots to switch, sc terminated")
                if removingbot then
                    removeBot()
                    sleep(2000)
                end
                getBot():stopScript()
            end
            goto BACK
        end
    end
end

setting.writeFile = function(threads)
    local file = io.open("WorldStatus.txt","a")
    file:write(threads.."\n")
    file:close()
end

setting.main = function()
    if typeaccount == "guest" then
        for i,bot in pairs(botList) do
            local derr = {}
            for id in bot:gmatch("([^|]+)") do 
                table.insert(derr, id) 
            end
            x = derr[1]
            y = derr[2]
            addBot(""..setting.randomletter().."",x,y)
            sleep(delayloginbot)
        end
    elseif typeaccount == "normal" then
        for i,list in pairs(botList) do
            local derr = {}
            for id in list:gmatch("([^|]+)") do 
                table.insert(derr, id) 
            end
            x = derr[1]
            y = derr[2]
            addBot(x,y)
            sleep(delayloginbot)
        end
    end
end

setting.setauth = function()
    if not indexbot and proxyServerDatabase then
        getProxyManager().custom_http_proxy = true
        getProxyManager().http_cooldown = delayDataBase
        if useDatabaseForMainProxy then
            getProxyManager().use_main_ip = true -- Use Main IP in Data Proxy Tab.
        end
        if setDatabaseType == "http" then
            addDataProxy(proxyDatabase, Proxy.http) 
        elseif setDatabaseType == "https" then
            addDataProxy(proxyDatabase, Proxy.https)
        elseif setDatabaseType == "socks" then
            addDataProxy(proxyDatabase, Proxy.socks5)
        end
    end
    if not indexbot and withproxy then
        getProxyManager():setLimit(botperproxy)
        for _, lists in pairs(proxyList) do
            getProxyManager():addProxy(lists)
        end
    end
end

if Information == "Script Harvest made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq" and scriptVersion == "0.1" then
    setting.setauth()
    if autologin and not indexbot then
        setting.main()
    end
    while getBot().status ~= BotStatus.online do
        getBot():connect()
        sleep(delayreconnect)
    end
    sleep(delayexecute * indexbot)
    if not multiplebot then
        for idx, value in ipairs(worlds) do
            ::BACK::
            setting.warp(value,doorfarmList,5000)
            setting.webhookinfo()
            if not subserver then
                if not nuked then
                    if not wrong then
                        setting.running(value)
                        setting.rechecking(value)
                    else
                        setting.writeFile("("..value..") is wrong id")
                        sleep(1000)
                        wrong = false
                        sleep(5000)
                        print("["..indexbot.."]"..value.." is wrong door id, skipped world")
                        setting.botinfo("("..value..") is wrong door id, skipped world @everyone")
                    end
                else
                    setting.writeFile("("..value..") is NUKED !!")
                    sleep(1000)
                    nuked = false
                    sleep(5000)
                    print("["..indexbot.."]"..value.." is NUKED!, check ur world !!")
                    setting.botinfo("("..value..") is NUKED!, check ur world !! @everyone")
                end
            else
                subserver = false
                sleep(5000)
                print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        end
    else
        for idx, value in ipairs(farmList) do
            setting.warp(value,doorfarmList,5000)
            setting.webhookinfo()
            ::BACK::
            if not subserver then
                if not nuked then
                    if not wrong then
                        setting.running(value)
                        setting.rechecking(value)
                    else
                        setting.writeFile("("..value..") is wrong id")
                        sleep(1000)
                        wrong = false
                        sleep(5000)
                        print("["..indexbot.."]"..value.." is wrong door id, skipped world")
                        setting.botinfo("("..value..") is wrong door id, skipped world @everyone")
                    end
                else
                    setting.writeFile("("..value..") is NUKED !!")
                    sleep(1000)
                    nuked = false
                    sleep(5000)
                    print("["..indexbot.."]"..value.." is NUKED!, check ur world !!")
                    setting.botinfo("("..value..") is NUKED!, check ur world !! @everyone")
                end
            else
                subserver = false
                sleep(5000)
                print("["..indexbot.."]Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                setting.reconnect(value,doorfarmList)
                goto BACK
            end
        end
    end
    print("["..indexbot.."]("..getBot().name..") Already finished all world, Terminated script!")
    setting.botinfo("("..getBot().name..") Already finished all world, Terminated script! @everyone")
    print("["..indexbot.."]Finished all worlds")
    if removingbot then
        removeBot()
        sleep(2000)
    end
else
    print("["..indexbot.."]Script Harvest made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq")
    setting.botinfo("Script Harvest made by Caramoy's Syndicate, Link Discord : https://discord.com/invite/fTTKW8vvuq")
end
